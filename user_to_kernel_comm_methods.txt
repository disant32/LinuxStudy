
As an expert Linux system programmer, here's a comprehensive list of all major ways user space can communicate with kernel space. These mechanisms are used for data exchange, control, notification, and more. Each method has specific use-cases, tradeoffs, and levels of complexity.

---

1. System Calls
- Purpose: Primary interface for user space to request services from the kernel (e.g., read(), write(), ioctl(), etc.)
- Usage: Used for file operations, network sockets, memory management, etc.
- Custom: You can add your own syscall for specific communication needs (less common).

---

2. Netlink Sockets
- Purpose: Communication between kernel modules and user space using socket-like interface.
- Types: NETLINK_ROUTE, NETLINK_GENERIC, NETLINK_USERSOCK, etc.
- Usage: Networking stack (e.g., iproute2, udev, auditd).
- Advantages: Structured, bidirectional, asynchronous communication.

---

3. ioctl (I/O Control)
- Purpose: User space sends control commands to kernel via file descriptors.
- Usage: Device drivers (e.g., /dev interfaces).
- Example: Custom driver ioctl to get/set parameters.

---

4. procfs (/proc)
- Purpose: Virtual filesystem interface for exposing kernel internals.
- Usage: Read/write files under /proc for monitoring or light control.
- Limitations: Mostly read-only, complex parsing.

---

5. sysfs (/sys)
- Purpose: Structured, attribute-based interface to kernel objects.
- Usage: Device parameters, kernel subsystems.
- Writeable: Yes (but for simple values only, no complex protocol).

---

6. Character Devices
- Purpose: Custom kernel drivers expose /dev/mydevice, allowing read/write/ioctl.
- Usage: General-purpose data/control channel.
- Advantages: Flexible and well-suited for complex bidirectional communication.

---

7. Futex (Fast Userspace Mutex)
- Purpose: Synchronization between user threads with kernel support only when contended.
- Indirect Use: Not for general communication, but interacts with kernel for wait/wakeup.

---

8. Signals
- Purpose: Asynchronous event notification from kernel to user space.
- Example: SIGSEGV, SIGCHLD, kill(), signalfd.
- Usage: Lightweight notification mechanism (one-way, limited data).

---

9. Eventfd, Timerfd, Signalfd
- Purpose: File-descriptor-based event notification from kernel to user space.
- Example: eventfd() used in epoll loops, timerfd() for timing events.
- Usage: Often used in async I/O or kernel-user coordination.

---

10. Uevents (via netlink or /sys)
- Purpose: Kernel to user space notifications for device events.
- Example: Hotplug, udev receives device plug/unplug events.

---

11. Memory Mapping (mmap)
- Purpose: Map kernel buffers (or device memory) into user space.
- Usage: High-speed data transfer (e.g., frame buffers, PCI devices).
- Bidirectional: Usually needs synchronization mechanism like ioctl or semaphores.

---

12. Upcalls / Callbacks (via Kernel Threads or Notifiers)
- Purpose: Not a direct mechanism, but sometimes the kernel invokes user space helpers.
- Examples: /sbin/hotplug, usermode helper (call_usermodehelper()).

---

13. Tracepoints / Perf Events
- Purpose: User space subscribes to internal kernel events.
- Example: perf, bpftrace, ftrace.
- Usage: Mostly observability, but can be adapted for control (advanced).

---

14. eBPF (Extended Berkeley Packet Filter)
- Purpose: User loads and attaches programs to kernel hooks.
- Usage: Observability, networking, sandboxing.
- Communication: Maps (e.g., bpf_map_update_elem, bpf_map_lookup_elem), perf ring buffers.

---

15. Security Modules (LSM Hooks, Seccomp, etc.)
- Purpose: Indirect communication via filtering or policy enforcement.
- Example: seccomp() filters, AppArmor/SELinux user tools affect kernel behavior.

---

16. Filesystem Notifications (inotify, fanotify)
- Purpose: User gets notified about kernel-handled FS events.
- Usage: File monitoring, antivirus, etc.
- Fanotify allows user to block/modify file access.

---

17. DebugFS
- Purpose: Developer-oriented virtual FS to expose kernel data for debugging.
- Flexible: Can support read/write, dynamic files, binary blobs.

---

Summary Table

| Mechanism         | Direction         | Kernel Code Needed | Common Use-case              |
|------------------|-------------------|--------------------|------------------------------|
| syscall           | U → K             | No                 | Standard operations          |
| netlink           | U ↔ K             | Yes                | Networking, kernel messages  |
| ioctl             | U ↔ K             | Yes                | Device control               |
| procfs/sysfs      | U ↔ K             | Yes                | Expose kernel parameters     |
| char device       | U ↔ K             | Yes                | Custom IPC/data channel      |
| mmap              | U ↔ K             | Yes                | Fast data sharing            |
| signals           | K → U             | No                 | Async notifications          |
| eventfd/timerfd   | K → U             | No                 | Sync/event notification      |
| uevent            | K → U             | No (via netlink)   | Hotplug/device events        |
| eBPF/maps         | U ↔ K             | Yes                | Dynamic kernel behavior      |
| tracepoints/perf  | K → U             | No (user tools)    | Observability                |
| futex             | U ↔ K             | No (used internally)| Thread sync                  |
| usermode helpers  | K → U             | Yes                | Rare fallback mechanism      |
